@inject BasketService _basket


@if (items is null)
{
    <p><em>@message</em></p>
}
else
{
    @foreach (var item in items)
    {
        <div class="container-fluid">
            <div class="card mb-2 w-75 flex-row p-2 align-items-center m-auto justify-content-between"
                 style="height: 150px; margin-bottom: 10px !important">

                <img src="./No_Image_Available.jpg" style="width: 200px;" />

                <div class="flex-column p-3 w-auto">
                    <h1 class="mr-3">@item.Name</h1>
                    <p class="mr-3">Price: @item.Price</p>
                </div>

                <div class="card flex-column p-2"
                     style="width: 70px; justify-items:center">
                    <i @onclick="@(() => IncreaseQuantityFor(item.ProductId))" class="fa fa-2x fa-sort-up align-middle" style="text-align:center"></i>
                    <input @onchange="@((x) => SetQuantityFor(item.ProductId, x.Value))" class="align-middle fa-2x"
                           style="margin:0px; padding:0px; text-align:center; border:none;" value="@item.Quantity" />
                    <i @onclick="@(() => DecreaseQuantityFor(item.ProductId))" class="fa fa-2x fa-sort-down" style="text-align:center"></i>
                </div>
            </div>
        </div>
    }
}

@code {
    private List<BasketItemModel> items;
    private string message = "Loading...";
    [Parameter] public EventCallback OnQuantityChange { get; set; }

    protected override async Task OnInitializedAsync()
    {
        message = "Loading...";
        items = await _basket.GetBasketItems();
        if(items is null)
            message = "There are no items in your basket.";
    }

    private async Task DecreaseQuantityFor(string prodId)
    {
        var prod = items.Find(x => x.ProductId == prodId);

        if (prod.Quantity == 1)
        {
            items.Remove(prod);
            await _basket.UpdateQuantityFor(prodId, prod.Quantity);
            await OnQuantityChange.InvokeAsync();
        }
        else
        {
            prod.Quantity--;
            await _basket.UpdateQuantityFor(prodId, prod.Quantity);
            await OnQuantityChange.InvokeAsync();
        }
    }

    private async Task IncreaseQuantityFor(string prodId)
    {
        var prod = items.Find(x => x.ProductId == prodId);
        prod.Quantity++;

        await _basket.UpdateQuantityFor(prodId, prod.Quantity);
        await OnQuantityChange.InvokeAsync();
    }

    private async Task SetQuantityFor(string prodId, object quantity)
    {
        int newQuantity = 0;
        var prod = items.Find(x => x.ProductId == prodId);
        try
        {
            newQuantity = int.Parse(quantity.ToString());
            prod.Quantity = newQuantity;
            await _basket.UpdateQuantityFor(prodId, newQuantity);
            await OnQuantityChange.InvokeAsync();
        }
        catch (Exception)
        {
            prod.Quantity = 1;
            Console.WriteLine("Invalid input for quantity!");
            await OnQuantityChange.InvokeAsync();
        }

    }
}
